import jax.numpy as jnp
import numpy as np
import numpy.testing as npt
import pytest
from dmff.admp.multipole import convert_cart2harm
from dmff.admp.multipole import rot_global2local, rot_local2global

class TestMultipoleGeometry:
    @pytest.mark.parametrize(
        "theta, expected",
        [
            (
                jnp.array(
                    [
                        [
                            -1.0614,
                            0.0,
                            0.0,
                            -0.23671684,
                            0.0452889,
                            0.026121,
                            -0.0714102,
                            0.0,
                            0.0,
                            0.0,
                        ],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                        [
                            -1.0614,
                            0.0,
                            0.0,
                            -0.23671684,
                            0.0452889,
                            0.026121,
                            -0.0714102,
                            0.0,
                            0.0,
                            0.0,
                        ],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ),
                jnp.array(
                    [
                        [
                            -1.0614,
                            -0.23671684,
                            0.0,
                            0.0,
                            -0.0714102,
                            0.0,
                            0.0,
                            0.01106659,
                            0.0,
                        ],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                        [
                            -1.0614,
                            -0.23671684,
                            0.0,
                            0.0,
                            -0.0714102,
                            0.0,
                            0.0,
                            0.01106659,
                            0.0,
                        ],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ),
            )
        ],
    )
    def test_convert_cart2harm(self, theta, expected):

        Q = convert_cart2harm(theta, 2)
        npt.assert_allclose(Q, expected, rtol=1e-6)

    @pytest.mark.parametrize(
        "Q_global, Q_local, local_frames",
        [
            (
                jnp.array(
                    [
                        [
                            -1.0614,
                            -0.22052474,
                            -0.06001501,
                            0.06165953,
                            -0.05764905,
                            -0.03114612,
                            0.02651503,
                            0.01010778,
                            0.01109856,
                        ],
                        [0.5307, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                        [
                            -1.0614,
                            -0.04308845,
                            0.22035345,
                            0.07498398,
                            0.02345808,
                            0.01798866,
                            0.01008533,
                            -0.05205911,
                            -0.03919373,
                        ],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ),
                jnp.array(
                    [
                        [
                            -1.0614,
                            -0.23671684,
                            0.0,
                            0.0,
                            -0.0714102,
                            0.0,
                            0.0,
                            0.01106659,
                            0.0,
                        ],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                        [
                            -1.0614,
                            -0.23671684,
                            0.0,
                            0.0,
                            -0.0714102,
                            0.0,
                            0.0,
                            0.01106659,
                            0.0,
                        ],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.5307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ),
                jnp.array(
                    [
                        [
                            [-0.96165454, -0.17201543, 0.21361469],
                            [0.10460715, -0.95003253, -0.29410106],
                            [0.2535308, -0.26047802, 0.9315972],
                        ],
                        [
                            [-0.38687626, -0.3113036, 0.8679958],
                            [-0.10460713, 0.9500325, 0.2941011],
                            [-0.91617906, 0.02298216, -0.4001096],
                        ],
                        [
                            [0.7882788, -0.10109846, 0.606956],
                            [0.10460714, -0.95003265, -0.29410112],
                            [0.60636103, 0.29532564, -0.7383151],
                        ],
                        [
                            [0.2869897, -0.94232714, -0.17221032],
                            [0.22607784, -0.10806667, 0.96809626],
                            [-0.93087363, -0.3167666, 0.18202528],
                        ],
                        [
                            [-0.5616504, -0.8264594, 0.03890521],
                            [-0.22607785, 0.10806668, -0.9680963],
                            [0.79588807, -0.5525272, -0.24753988],
                        ],
                        [
                            [-0.9122986, 0.32489008, 0.24931434],
                            [0.22607782, -0.10806666, 0.9680962],
                            [0.3414673, 0.9395574, 0.02513866],
                        ],
                    ]
                ),
            )
        ],
    )
    def test_rot_global_local(self, Q_global, Q_local, local_frames):

        ans_Q = rot_local2global(Q_local, local_frames, 2)
        npt.assert_allclose(ans_Q, Q_global, rtol=1e-6, atol=1e-6)
        ans_Q = rot_global2local(Q_global, local_frames, 2)
        npt.assert_allclose(ans_Q, Q_local, rtol=1e-6, atol=1e-6)
